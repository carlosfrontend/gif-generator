{"version":3,"file":"main.36d8aec9b3f208b4f2bf.js","mappings":"mBACA,IAAIA,EAAsB,CAAC,ECD3BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,G,MCAxB,IAAIC,EACAP,EAAoBC,EAAEO,gBAAeD,EAAYP,EAAoBC,EAAEQ,SAAW,IACtF,IAAIC,EAAWV,EAAoBC,EAAES,SACrC,IAAKH,GAAaG,IACbA,EAASC,gBACZJ,EAAYG,EAASC,cAAcC,MAC/BL,GAAW,CACf,IAAIM,EAAUH,EAASI,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,KAAOT,IAAc,aAAaU,KAAKV,KAAaA,EAAYM,EAAQG,KAAKJ,GAE3F,CAID,IAAKL,EAAW,MAAM,IAAIW,MAAM,yDAChCX,EAAYA,EAAUY,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFnB,EAAoBoB,EAAIb,C,mICZlBc,EAAUX,SAASY,cAAc,iBACjCC,EAAYb,SAASY,cAAc,eACnCE,EAAed,SAASY,cAAc,kBACtCG,EACJ,gFAEIC,EAAMhB,SAASY,cAAc,WAC7BK,EAAYjB,SAASY,cAAc,mBACnCM,EAAYlB,SAASY,cAAc,UAEzCD,EAAQT,IAAMiB,EACdN,EAAUX,IAAMkB,EAChBJ,EAAId,IAAMmB,EAuDVJ,EAAUK,iBAAiB,SArDNC,KACnBC,MAAMT,EAAK,CAAEU,KAAM,SAChBC,MAAMC,IACL,IAAKA,EAASC,GACZ,MAAM,IAAIpB,MACR,iEAIJ,OADAU,EAAUW,YAAc,GACjBF,EAASG,MAAM,IAEvBJ,MAAMC,IACLX,EAAId,IAAMyB,EAASI,KAAKC,OAAOC,SAASC,GAAG,IAE5CC,OAAOC,IACNlB,EAAUW,YAAcO,CAAK,GAC7B,IAsCNtB,EAAaQ,iBAAiB,SAnCXe,IACjB,MAAMC,EAAUD,EAEVE,EADcvC,SAASY,cAAc,WACN4B,MAC/BC,EAAc,GAAE1B,EAAIN,QACxB,SACA,kBACK8B,IACPf,MAAMiB,EAAY,CAAEhB,KAAM,SACvBC,MAAMC,IACL,IAAKA,EAASC,GACZ,MAAM,IAAIpB,MACR,iEAIJ,OADAU,EAAUW,YAAc,GACjBF,EAASG,MAAM,IAEvBJ,MAAMC,IACL,GAA6B,IAAzBA,EAASI,KAAK1B,QAAyC,MAAzBsB,EAASe,KAAKC,OAC9C,MAAM,IAAInC,MACR,4EAGJQ,EAAId,IAAMyB,EAASI,KAAKC,OAAOC,SAASC,IACxChB,EAAUW,YAAc,GACxBS,EAAQM,OAAOC,cAAcA,cAAcC,SAAS,GAAGN,MAAQ,EAAE,IAElEL,OAAOC,IACNlB,EAAUW,YAAcO,EACxBE,EAAQM,OAAOC,cAAcA,cAAcC,SAAS,GAAGN,MAAQ,EAAE,GACjE,G","sources":["webpack://gif-generator/webpack/bootstrap","webpack://gif-generator/webpack/runtime/global","webpack://gif-generator/webpack/runtime/publicPath","webpack://gif-generator/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import './styles/main.css';\n\nimport magnifyIconSrc from './images/magnify.svg';\nimport attrImageSrc from './images/PoweredBy_200px-White_HorizLogo.png';\nimport defaultImg from './images/default.gif';\n\nconst magnify = document.querySelector('#magnify-icon');\nconst attrImage = document.querySelector('.attr-image');\nconst searchButton = document.querySelector('#search-button');\nconst URI =\n  'https://api.giphy.com/v1/gifs/random?api_key=rVwOiFFX3oZk5jfqXjux1KP3HHyTbcZH';\n\nconst img = document.querySelector('.result');\nconst getGifBtn = document.querySelector('.get-gif-button');\nconst spanError = document.querySelector('.error');\n\nmagnify.src = magnifyIconSrc;\nattrImage.src = attrImageSrc;\nimg.src = defaultImg;\n\nconst getRandomGif = () => {\n  fetch(URI, { mode: 'cors' })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(\n          'Could not obtain a new image. A correct API key is required!!'\n        );\n      }\n      spanError.textContent = '';\n      return response.json();\n    })\n    .then((response) => {\n      img.src = response.data.images.original.url;\n    })\n    .catch((error) => {\n      spanError.textContent = error;\n    });\n};\n\nconst searchGif = (event) => {\n  const myEvent = event;\n  const searchInput = document.querySelector('#search');\n  const searchInputValue = searchInput.value;\n  const URI_SEARCH = `${URI.replace(\n    'random',\n    'translate'\n  )}&s=${searchInputValue}`;\n  fetch(URI_SEARCH, { mode: 'cors' })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(\n          'Could not obtain a new image. A correct API key is required!!'\n        );\n      }\n      spanError.textContent = '';\n      return response.json();\n    })\n    .then((response) => {\n      if (response.data.length === 0 && response.meta.status === 200) {\n        throw new Error(\n          'Try writing something different. We did not find images with that term!!'\n        );\n      }\n      img.src = response.data.images.original.url;\n      spanError.textContent = '';\n      myEvent.target.parentElement.parentElement.children[0].value = '';\n    })\n    .catch((error) => {\n      spanError.textContent = error;\n      myEvent.target.parentElement.parentElement.children[0].value = '';\n    });\n};\n\ngetGifBtn.addEventListener('click', getRandomGif);\nsearchButton.addEventListener('click', searchGif);\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","magnify","querySelector","attrImage","searchButton","URI","img","getGifBtn","spanError","magnifyIconSrc","attrImageSrc","defaultImg","addEventListener","getRandomGif","fetch","mode","then","response","ok","textContent","json","data","images","original","url","catch","error","event","myEvent","searchInputValue","value","URI_SEARCH","meta","status","target","parentElement","children"],"sourceRoot":""}